#! /usr/bin/env bash
# Abort on errors
set -e

cli_games_path=$(pwd)

get_challenge_path(){
    challenge_group=${1}
    challenge_number=${2}

    echo "challenges/${challenge_group}/${challenge_number}"
}

is_solved(){
    challenge_group=${1}
    challenge_number=${2}

    # Make sure .results exists on first run
    touch .results
    if grep "${challenge_group}/${challenge_number}" .results 2>&1 >/dev/null; then
        score=$(grep "${challenge_group}/${challenge_number}" .results | cut -d":" -f3 | sort | tail -n1)
        echo "(score: ${score})"
    fi
}

get_hint(){
    challenge_group=${1}
    challenge_number=${2}
    challenge_path="${cli_games_path}/$(get_challenge_path ${challenge_group} ${challenge_number})"

    hint_path="${challenge_path}/HINT"
    cat ${hint_path}
}

solved(){
    challenge_group=${1}
    challenge_number=${2}
    solution_path=${3}
    par=${4}
    characters_used=${5}

    echo "${challenge_group}/${challenge_number}:${solution_path}:${characters_used}" >> ${cli_games_path}/.results
    echo "Well done! You passed ${challenge_group} challenge ${challenge_number}!"
    echo "Does the hint make sense now? "'"'"$(get_hint ${challenge_group} ${challenge_number})"'"'""
    echo -n "You used ${characters_used} characters."
    if [[ ${par} -lt ${characters_used} ]]; then
        echo " The target was ${par}."
    elif [[ ${par} -eq ${characters_used} ]]; then
        echo " Well done, you met the target!"
    else
        echo " Excellent! You beat the target of ${par}!"
    fi
}

failed(){
    challenge_group=${1}
    challenge_number=${2}

    echo "Sorry, you didn't pass ${challenge_group} challenge ${challenge_number} this time. Try again soon!"
}

test_data_processing_challenge_attempt(){
    challenge_group=${1}
    challenge_number=${2}
    solution_file_path="$(pwd)/${3}"

    # Set up test environment
    test_path=".test/${challenge_group}/${challenge_number}"
    challenge_path="$(get_challenge_path ${challenge_group} ${challenge_number})"
    rm -rf ${test_path}
    mkdir -p ${test_path}
    cp -r "${challenge_path}"/* ${test_path}
    cp "${challenge_path}"/.par ${test_path}
    cd ${test_path}
    if [[ -x setup ]]; then
        ./setup
    fi
    par=$(cat .par)

    chmod +x ${solution_file_path}
    echo "Comparing input and output data:"
    if sdiff <(cat start | ${solution_file_path}) finish && echo ""; then
        characters=$(wc -c ${solution_file_path} | cut -d" " -f1)
        solved ${challenge_group} ${challenge_number} ${solution_file_path} ${par} ${characters}
    else
        failed ${challenge_group} ${challenge_number}
    fi
}

get_challenge_name(){
    challenge_group=${1}
    challenge_number=${2}

    challenge_path=$(get_challenge_path ${challenge_group} ${challenge_number})
    readme_path="${challenge_path}/README"
    challenge_name=$(cat ${readme_path} | head -n1)
    echo ${challenge_name}
}

get_challenges(){
    filter="$@"
    challenge_groups=$(ls challenges | sort)
    echo "Challenges by group:"

    displayed_something=false
    if [[ -z "${filter}" ]]; then
        # If we're not filtering, show everything
        filter=${challenge_groups}
    fi
    for group in ${challenge_groups}; do
        # Display this group if it's in the filter list
        if [[ ${filter} =~ (^|[[:space:]])"${group}"($|[[:space:]]) ]]; then
            echo "  ${group}"
            challenges=$(ls challenges/${group} | sort -g)
            for challenge in ${challenges}; do
                par=$(cat $(get_challenge_path ${group} ${challenge})/.par)
                echo "    $(is_solved ${group} ${challenge}) ${challenge}: $(get_challenge_name ${group} ${challenge}) Par: ${par}"
            done
            displayed_something=true
        fi
    done
    if [[ ${displayed_something} == 'false' ]]; then
        echo "No challenges found for group(s): ${filter}"
    fi
}

make_practise(){
    challenge_group=${1}
    challenge_number=${2}

    challenge_path="$(get_challenge_path ${challenge_group} ${challenge_number})"
    practise_path="practise/${challenge_group}/${challenge_number}"

    if [[ -d ${practise_path} ]]; then
        cat ${practise_path}/README
        echo "=================================================="
        echo "Practise directory for challenge ${challenge_number} of group ${challenge_group} already exists in: ${practise_path}"
        return 0
    fi

    if [[ -d ${challenge_path} ]]; then
        mkdir -p ${practise_path}
        cp -r ${challenge_path}/* ${practise_path}/
        if [[ -x ${practise_path}/setup ]]; then
            cd ${practise_path}
            ./setup
            cd - >/dev/null
        fi
        cat ${practise_path}/README
        echo "=================================================="
        echo "Practise directory for challenge ${challenge_number} of group ${challenge_group} created: ${practise_path}"
    else
        if [[ -d challenges/${challenge_group} ]]; then
            echo "Could not find challenge ${challenge_number} in group ${challenge_group}"
        else
            echo "Could not find challenge group ${challenge_group}"
        fi
        return 1
    fi
}

# TODO: cd ${0}'s dir
case "${1}" in
  list) shift
        get_challenges $*
        ;;
  practi[cs]e) make_practise $2 $3
               ;;
  hint) get_hint $2 $3
        ;;
  attempt) test_data_processing_challenge_attempt $2 $3 $4
           ;;
  *) echo "CLI games- play games to improve your skills with CLI utilities."
     echo "  ${0} list -- This will list available games."
     echo "               It will also show you which games you have completed."
     echo "               The games are grouped by the utility they use."
     echo "               Within each group they are numbered."
     echo "               If you need to read more about a utility, try "
     echo "               man <challenge group (command)>"
     echo ""
     echo "  ${0} practise <challenge group> <challenge number>"
     echo "            -- This will set up a practise directory for you to "
     echo "               attempt different solutions to specific challenges."
     echo "               e.g. to practise the first 'cut' challenge:"
     echo "               ${0} practise cut 1"
     echo ""
     echo "  ${0} hint <challenge group> <challenge number>"
     echo "            -- Get a hint about the specified challenge."
     echo ""
     echo "  ${0} attempt <challenge group> <challenge number> <solution file>"
     echo "            -- This will test your attempted solution to a given"
     echo "               challenge."
     echo "               The solution file must be executable and should be"
     echo "               created in such a way that it will create the right"
     echo "               output (in the 'finish' file) when the 'start' file"
     echo "               is piped to it."
     echo "               To test a solution by hand you would compare the"
     echo "               output of 'cat start | ./my_solution' with the"
     echo "               contents of the 'finish' file."
esac
